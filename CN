PROGRAM 1: IMPleMent cOnnectInG twO nOdes usInG 
netwORk sIMulAtOR. 
set ns [new Simulator]
set nf [open out.nam w]
$ns namtrace-all $nf
set ntrace [open out.tr w]
$ns trace-all $ntrace
proc finish {} {
global ns nf
$ns flush-trace
close $nf
exec nam out.nam &
exit 0
}
set n0 [$ns node]
set n1 [$ns node]
$ns duplex-link $n0 $n1 1Mb 10 DropTail
$ns at 5.0 "finish"
$ns run


PROGRAM 2: IMPleMent cOnnectInG thRee nOdes 
cOnsIdeRInG One nOde As A centRAl nOde usInG 
netwORk sIMulAtOR. IMPleMent A netwORk tO cOnnect 
thRee nOdes cOnsIdeRInG One nOde As A centRAl nOde 
usInG netwORk sIMulAtOR. 
set ns [new Simulator]
set nf [open out.nam w]
$ns namtrace-all $nf
set ntrace [open out.tr w]
$ns trace-all $ntrace
proc finish {} {
global ns nf 
$ns flush-trace
close $nf
exec nam out.nam &
exit 0
}
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
$ns duplex-link $n1 $n0 1Mb 10 DropTail
$ns duplex-link $n1 $n2 1Mb 10 DropTail
$ns at 5.0 "finish"
$ns run


PROGRAM 3:IMPleMent bus tOPOlOGy usInG 
netwORk sIMulAtOR. 
set ns [new Simulator]
set nf [open out.nam w]
$ns namtrace-all $nf
set ntrace [open out.tr w]
$ns trace-all $ntrace
proc finish {} {
global ns nf 
$ns flush-trace
close $nf
exec nam out.nam &
exit 0
}
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
set lan0 [$ns newLan "$n0 $n1 $n2 $n3" 0.7Mb 20ms 
LL Queue/Drop Tail MAC/Csma/Cd Channel]
$ns at 5.0 "finish"
$ns run


PROGRAM 4:IMPleMent stAR tOPOlOGy 
usInG netwORk sIMulAtOR. 
set ns [new Simulator]
set nf [open out.nam w]
$ns namtrace-all $nf
set ntrace [open out.tr w]
$ns trace-all $ntrace
proc finish {} {
global ns nf 
$ns flush-trace
close $nf
exec nam out.nam &
exit 0
}
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
set n4 [$ns node]
$ns duplex-link $n0 $n1 1Mb 10ms DropTail
$ns duplex-link $n0 $n2 1Mb 10ms DropTail
$ns duplex-link $n0 $n3 1Mb 10ms DropTail
$ns duplex-link $n0 $n4 1Mb 10ms DropTail
$ns duplex-link-op $n0 $n1 orient right-down
$ns duplex-link-op $n0 $n2 orient right-up
$ns duplex-link-op $n0 $n3 orient left-down
$ns duplex-link-op $n0 $n4 orient left-up
$ns at 5.0 "finish"
$ns run


PROGRAM 5: IMPleMent RInG tOPOlOGy usInG 
netwORk sIMulAtOR. 
 
set ns [new Simulator]
set nf [open out.nam w]
$ns namtrace-all $nf
set ntrace [open out.tr w]
$ns trace-all $ntrace
proc finish {} {
global ns nf 
$ns flush-trace
close $nf
exec nam out.nam &
exit 0
}
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
$ns duplex-link $n0 $n1 1Mb 10ms DropTail
$ns duplex-link $n1 $n2 1Mb 10ms DropTail
$ns duplex-link $n2 $n3 1Mb 10ms DropTail
$ns duplex-link $n3 $n0 1Mb 10ms DropTail
$ns duplex-link-op $n0 $n1 orient left-down
$ns duplex-link-op $n1 $n2 orient right-down
$ns duplex-link-op $n2 $n3 orient right-up
$ns duplex-link-op $n3 $n0 orient left-up
$ns at 5.0 "finish"
$ns run


PROGRAM 6:deMOnstRAte the use Of 
wIReless lAn usInG netwORk sIMulAtOR. 
 
set ns [new Simulator]
#Define different colors for data flows (for NAM)
$ns color 1 Blue
$ns color 2 Red
#open the NAM trace file
set nf [open out.nam w]
$ns namtrace-all $nf
#define a 'finish' procedure
proc finish {} {
 global ns nf
 $ns flush-trace
 #close the NAM trace file
 close $nf
 #Execute NAM on the trace file
 exec nam out.nam &
 exit 0
}
#create four nodes
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
#Create links between the nodes
$ns duplex-link $n0 $n2 2Mb 10ms DropTail
$ns duplex-link $n1 $n2 2Mb 10ms DropTail
$ns duplex-link $n2 $n3 1.7Mb 20ms DropTail
#set Queue size of link (n2-n3) to 10
$ns queue-limit $n2 $n3 10
#give node position (for NAM)
$ns duplex-link-op $n0 $n2 orient right-down
$ns duplex-link-op $n1 $n2 orient right-up 
$ns duplex-link-op $n2 $n3 orient right
#Monitor the queue for link (n2-n3).(for NAM)
$ns duplex-link-op $n2 $n3 queuePos 0.5
#setup a TCP connection
set tcp [new Agent/TCP]
$tcp set class_ 2
$ns attach-agent $n0 $tcp
set sink [new Agent/TCPSink]
$ns attach-agent $n3 $sink
$ns connect $tcp $sink
$tcp set fid_ 1
#Setup a FTP over TCP connection
set ftp [new Application/FTP]
$ftp attach-agent $tcp 
$ftp set type_ FTP
#Setup a UDP connection
set udp [new Agent/UDP]
$ns attach-agent $n1 $udp
set null [new Agent/Null]
$ns attach-agent $n3 $null
$ns connect $udp $null
$udp set fid_ 2
#set up a CBR over UDP connection
set cbr [new Application/Traffic/CBR]
$cbr attach-agent $udp
$cbr set type_ CBR
$cbr set packet_size_ 1000
$cbr set rate_ 1mb
$cbr set random_ false
#Schedule events for the CBR and FTP agents
$ns at 0.1 "$cbr start"
$ns at 1.0 "$ftp start"
$ns at 4.0 "$ftp stop"
$ns at 4.5 "$cbr stop"
#detach tcp and Sink agents (not really necessary)
$ns at 4.5 "$ns detach-agent $n0 $tcp ; $ns detach-
agent $n3 $sink"
#call the finish procedure after 5 seconds of simulation
time
$ns at 5.0 "finish"
#print CBR packet size and interva
puts "CBR packet size = [$cbr set packet_size_]"
puts "CBR interval = [$cbr set interval_]"
#run the simulator
$ns run


PROGRAM 7: IMPleMent ftP usInG tcP bulk 
tRAnsfeR usInG netwORk sIMulAtOR. 
set ns [new Simulator]
set nf [open out.nam w]
$ns namtrace-all $nf
set ntrace [open out.tr w]
$ns trace-all $ntrace
proc finish {} {
global ns nf
$ns flush-trace
close $nf
exec nam out.nam &
exit 0
}
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
$ns duplex-link $n0 $n1 1Mb 10ms DropTail
$ns duplex-link $n1 $n2 1Mb 10ms DropTail


$ns queue-limit $n1 $n2 5
$ns duplex-link-op $n0 $n1 orient right-down
$ns duplex-link-op $n1 $n2 orient right-up
set tcp [new Agent/TCP]
$ns attach-agent $n0 $tcp
set sink [new Agent/TCPSink]
$ns attach-agent $n2 $sink
$ns connect $tcp $sink
set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ftp set type_ FTP
$ftp set packSize_ 0.11
$ftp set rate_ 0.1mb
$ns at 1.0 "$ftp start"
$ns at 4.0 "$ftp stop"
$ns at 5.0 "finish"
$ns run